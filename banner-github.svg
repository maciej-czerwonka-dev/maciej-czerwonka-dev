<svg xmlns="http://www.w3.org/2000/svg" xml:space="preserve" id="svg5" width="1884.762" height="470.203" version="1.1"><defs id="defs2"><script id="mesh_polyfill" type="text/javascript">!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();</script><script id="mesh_polyfill-7" type="text/javascript">!function(){const t=&quot;http://www.w3.org/2000/svg&quot;,e=&quot;http://www.w3.org/1999/xlink&quot;,s=&quot;http://www.w3.org/1999/xhtml&quot;,r=2;if(document.createElementNS(t,&quot;meshgradient&quot;).x)return;const n=(t,e,s,r)=&gt;{let n=new x(.5*(e.x+s.x),.5*(e.y+s.y)),o=new x(.5*(t.x+e.x),.5*(t.y+e.y)),i=new x(.5*(s.x+r.x),.5*(s.y+r.y)),a=new x(.5*(n.x+o.x),.5*(n.y+o.y)),h=new x(.5*(n.x+i.x),.5*(n.y+i.y)),l=new x(.5*(a.x+h.x),.5*(a.y+h.y));return[[t,o,a,l],[l,h,i,r]]},o=t=&gt;{let e=t[0].distSquared(t[1]),s=t[2].distSquared(t[3]),r=.25*t[0].distSquared(t[2]),n=.25*t[1].distSquared(t[3]),o=e&gt;s?e:s,i=r&gt;n?r:n;return 18*(o&gt;i?o:i)},i=(t,e)=&gt;Math.sqrt(t.distSquared(e)),a=(t,e)=&gt;t.scale(2/3).add(e.scale(1/3)),h=t=&gt;{let e,s,r,n,o,i,a,h=new g;return t.match(/(\w+\(\s*[^)]+\))+/g).forEach(t=&gt;{let l=t.match(/[\w.-]+/g),d=l.shift();switch(d){case&quot;translate&quot;:2===l.length?e=new g(1,0,0,1,l[0],l[1]):(console.error(&quot;mesh.js: translate does not have 2 arguments!&quot;),e=new g(1,0,0,1,0,0)),h=h.append(e);break;case&quot;scale&quot;:1===l.length?s=new g(l[0],0,0,l[0],0,0):2===l.length?s=new g(l[0],0,0,l[1],0,0):(console.error(&quot;mesh.js: scale does not have 1 or 2 arguments!&quot;),s=new g(1,0,0,1,0,0)),h=h.append(s);break;case&quot;rotate&quot;:if(3===l.length&amp;&amp;(e=new g(1,0,0,1,l[1],l[2]),h=h.append(e)),l[0]){r=l[0]*Math.PI/180;let t=Math.cos(r),e=Math.sin(r);Math.abs(t)&lt;1e-16&amp;&amp;(t=0),Math.abs(e)&lt;1e-16&amp;&amp;(e=0),a=new g(t,e,-e,t,0,0),h=h.append(a)}else console.error(&quot;math.js: No argument to rotate transform!&quot;);3===l.length&amp;&amp;(e=new g(1,0,0,1,-l[1],-l[2]),h=h.append(e));break;case&quot;skewX&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),o=new g(1,0,n,1,0,0),h=h.append(o)):console.error(&quot;math.js: No argument to skewX transform!&quot;);break;case&quot;skewY&quot;:l[0]?(r=l[0]*Math.PI/180,n=Math.tan(r),i=new g(1,n,0,1,0,0),h=h.append(i)):console.error(&quot;math.js: No argument to skewY transform!&quot;);break;case&quot;matrix&quot;:6===l.length?h=h.append(new g(...l)):console.error(&quot;math.js: Incorrect number of arguments for matrix!&quot;);break;default:console.error(&quot;mesh.js: Unhandled transform type: &quot;+d)}}),h},l=t=&gt;{let e=[],s=t.split(/[ ,]+/);for(let t=0,r=s.length-1;t&lt;r;t+=2)e.push(new x(parseFloat(s[t]),parseFloat(s[t+1])));return e},d=(t,e)=&gt;{for(let s in e)t.setAttribute(s,e[s])},c=(t,e,s,r,n)=&gt;{let o,i,a=[0,0,0,0];for(let h=0;h&lt;3;++h)e[h]&lt;t[h]&amp;&amp;e[h]&lt;s[h]||t[h]&lt;e[h]&amp;&amp;s[h]&lt;e[h]?a[h]=0:(a[h]=.5*((e[h]-t[h])/r+(s[h]-e[h])/n),o=Math.abs(3*(e[h]-t[h])/r),i=Math.abs(3*(s[h]-e[h])/n),a[h]&gt;o?a[h]=o:a[h]&gt;i&amp;&amp;(a[h]=i));return a},u=[[1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0],[-3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0],[2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0],[0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0],[-3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0],[0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0],[9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1],[-6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1],[2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0],[0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0],[-6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1],[4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1]],f=t=&gt;{let e=[];for(let s=0;s&lt;16;++s){e[s]=0;for(let r=0;r&lt;16;++r)e[s]+=u[s][r]*t[r]}return e},p=(t,e,s)=&gt;{const r=e*e,n=s*s,o=e*e*e,i=s*s*s;return t[0]+t[1]*e+t[2]*r+t[3]*o+t[4]*s+t[5]*s*e+t[6]*s*r+t[7]*s*o+t[8]*n+t[9]*n*e+t[10]*n*r+t[11]*n*o+t[12]*i+t[13]*i*e+t[14]*i*r+t[15]*i*o},y=t=&gt;{let e=[],s=[],r=[];for(let s=0;s&lt;4;++s)e[s]=[],e[s][0]=n(t[0][s],t[1][s],t[2][s],t[3][s]),e[s][1]=[],e[s][1].push(...n(...e[s][0][0])),e[s][1].push(...n(...e[s][0][1])),e[s][2]=[],e[s][2].push(...n(...e[s][1][0])),e[s][2].push(...n(...e[s][1][1])),e[s][2].push(...n(...e[s][1][2])),e[s][2].push(...n(...e[s][1][3]));for(let t=0;t&lt;8;++t){s[t]=[];for(let r=0;r&lt;4;++r)s[t][r]=[],s[t][r][0]=n(e[0][2][t][r],e[1][2][t][r],e[2][2][t][r],e[3][2][t][r]),s[t][r][1]=[],s[t][r][1].push(...n(...s[t][r][0][0])),s[t][r][1].push(...n(...s[t][r][0][1])),s[t][r][2]=[],s[t][r][2].push(...n(...s[t][r][1][0])),s[t][r][2].push(...n(...s[t][r][1][1])),s[t][r][2].push(...n(...s[t][r][1][2])),s[t][r][2].push(...n(...s[t][r][1][3]))}for(let t=0;t&lt;8;++t){r[t]=[];for(let e=0;e&lt;8;++e)r[t][e]=[],r[t][e][0]=s[t][0][2][e],r[t][e][1]=s[t][1][2][e],r[t][e][2]=s[t][2][2][e],r[t][e][3]=s[t][3][2][e]}return r};class x{constructor(t,e){this.x=t||0,this.y=e||0}toString(){return`(x=${this.x}, y=${this.y})`}clone(){return new x(this.x,this.y)}add(t){return new x(this.x+t.x,this.y+t.y)}scale(t){return void 0===t.x?new x(this.x*t,this.y*t):new x(this.x*t.x,this.y*t.y)}distSquared(t){let e=this.x-t.x,s=this.y-t.y;return e*e+s*s}transform(t){let e=this.x*t.a+this.y*t.c+t.e,s=this.x*t.b+this.y*t.d+t.f;return new x(e,s)}}class g{constructor(t,e,s,r,n,o){void 0===t?(this.a=1,this.b=0,this.c=0,this.d=1,this.e=0,this.f=0):(this.a=t,this.b=e,this.c=s,this.d=r,this.e=n,this.f=o)}toString(){return`affine: ${this.a} ${this.c} ${this.e} \n       ${this.b} ${this.d} ${this.f}`}append(t){t instanceof g||console.error(&quot;mesh.js: argument to Affine.append is not affine!&quot;);let e=this.a*t.a+this.c*t.b,s=this.b*t.a+this.d*t.b,r=this.a*t.c+this.c*t.d,n=this.b*t.c+this.d*t.d,o=this.a*t.e+this.c*t.f+this.e,i=this.b*t.e+this.d*t.f+this.f;return new g(e,s,r,n,o,i)}}class w{constructor(t,e){this.nodes=t,this.colors=e}paintCurve(t,e){if(o(this.nodes)&gt;r){const s=n(...this.nodes);let r=[[],[]],o=[[],[]];for(let t=0;t&lt;4;++t)r[0][t]=this.colors[0][t],r[1][t]=(this.colors[0][t]+this.colors[1][t])/2,o[0][t]=r[1][t],o[1][t]=this.colors[1][t];let i=new w(s[0],r),a=new w(s[1],o);i.paintCurve(t,e),a.paintCurve(t,e)}else{let s=Math.round(this.nodes[0].x);if(s&gt;=0&amp;&amp;s&lt;e){let r=4*(~~this.nodes[0].y*e+s);t[r]=Math.round(this.colors[0][0]),t[r+1]=Math.round(this.colors[0][1]),t[r+2]=Math.round(this.colors[0][2]),t[r+3]=Math.round(this.colors[0][3])}}}}class m{constructor(t,e){this.nodes=t,this.colors=e}split(){let t=[[],[],[],[]],e=[[],[],[],[]],s=[[[],[]],[[],[]]],r=[[[],[]],[[],[]]];for(let s=0;s&lt;4;++s){const r=n(this.nodes[0][s],this.nodes[1][s],this.nodes[2][s],this.nodes[3][s]);t[0][s]=r[0][0],t[1][s]=r[0][1],t[2][s]=r[0][2],t[3][s]=r[0][3],e[0][s]=r[1][0],e[1][s]=r[1][1],e[2][s]=r[1][2],e[3][s]=r[1][3]}for(let t=0;t&lt;4;++t)s[0][0][t]=this.colors[0][0][t],s[0][1][t]=this.colors[0][1][t],s[1][0][t]=(this.colors[0][0][t]+this.colors[1][0][t])/2,s[1][1][t]=(this.colors[0][1][t]+this.colors[1][1][t])/2,r[0][0][t]=s[1][0][t],r[0][1][t]=s[1][1][t],r[1][0][t]=this.colors[1][0][t],r[1][1][t]=this.colors[1][1][t];return[new m(t,s),new m(e,r)]}paint(t,e){let s,n=!1;for(let t=0;t&lt;4;++t)if((s=o([this.nodes[0][t],this.nodes[1][t],this.nodes[2][t],this.nodes[3][t]]))&gt;r){n=!0;break}if(n){let s=this.split();s[0].paint(t,e),s[1].paint(t,e)}else{new w([...this.nodes[0]],[...this.colors[0]]).paintCurve(t,e)}}}class b{constructor(t){this.readMesh(t),this.type=t.getAttribute(&quot;type&quot;)||&quot;bilinear&quot;}readMesh(t){let e=[[]],s=[[]],r=Number(t.getAttribute(&quot;x&quot;)),n=Number(t.getAttribute(&quot;y&quot;));e[0][0]=new x(r,n);let o=t.children;for(let t=0,r=o.length;t&lt;r;++t){e[3*t+1]=[],e[3*t+2]=[],e[3*t+3]=[],s[t+1]=[];let r=o[t].children;for(let n=0,o=r.length;n&lt;o;++n){let o=r[n].children;for(let r=0,i=o.length;r&lt;i;++r){let i=r;0!==t&amp;&amp;++i;let h,d=o[r].getAttribute(&quot;path&quot;),c=&quot;l&quot;;null!=d&amp;&amp;(c=(h=d.match(/\s*([lLcC])\s*(.*)/))[1]);let u=l(h[2]);switch(c){case&quot;l&quot;:0===i?(e[3*t][3*n+3]=u[0].add(e[3*t][3*n]),e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0].add(e[3*t+3][3*n+3])),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;L&quot;:0===i?(e[3*t][3*n+3]=u[0],e[3*t][3*n+1]=a(e[3*t][3*n],e[3*t][3*n+3]),e[3*t][3*n+2]=a(e[3*t][3*n+3],e[3*t][3*n])):1===i?(e[3*t+3][3*n+3]=u[0],e[3*t+1][3*n+3]=a(e[3*t][3*n+3],e[3*t+3][3*n+3]),e[3*t+2][3*n+3]=a(e[3*t+3][3*n+3],e[3*t][3*n+3])):2===i?(0===n&amp;&amp;(e[3*t+3][3*n+0]=u[0]),e[3*t+3][3*n+1]=a(e[3*t+3][3*n],e[3*t+3][3*n+3]),e[3*t+3][3*n+2]=a(e[3*t+3][3*n+3],e[3*t+3][3*n])):(e[3*t+1][3*n]=a(e[3*t][3*n],e[3*t+3][3*n]),e[3*t+2][3*n]=a(e[3*t+3][3*n],e[3*t][3*n]));break;case&quot;c&quot;:0===i?(e[3*t][3*n+1]=u[0].add(e[3*t][3*n]),e[3*t][3*n+2]=u[1].add(e[3*t][3*n]),e[3*t][3*n+3]=u[2].add(e[3*t][3*n])):1===i?(e[3*t+1][3*n+3]=u[0].add(e[3*t][3*n+3]),e[3*t+2][3*n+3]=u[1].add(e[3*t][3*n+3]),e[3*t+3][3*n+3]=u[2].add(e[3*t][3*n+3])):2===i?(e[3*t+3][3*n+2]=u[0].add(e[3*t+3][3*n+3]),e[3*t+3][3*n+1]=u[1].add(e[3*t+3][3*n+3]),0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2].add(e[3*t+3][3*n+3]))):(e[3*t+2][3*n]=u[0].add(e[3*t+3][3*n]),e[3*t+1][3*n]=u[1].add(e[3*t+3][3*n]));break;case&quot;C&quot;:0===i?(e[3*t][3*n+1]=u[0],e[3*t][3*n+2]=u[1],e[3*t][3*n+3]=u[2]):1===i?(e[3*t+1][3*n+3]=u[0],e[3*t+2][3*n+3]=u[1],e[3*t+3][3*n+3]=u[2]):2===i?(e[3*t+3][3*n+2]=u[0],e[3*t+3][3*n+1]=u[1],0===n&amp;&amp;(e[3*t+3][3*n+0]=u[2])):(e[3*t+2][3*n]=u[0],e[3*t+1][3*n]=u[1]);break;default:console.error(&quot;mesh.js: &quot;+c+&quot; invalid path type.&quot;)}if(0===t&amp;&amp;0===n||r&gt;0){let e=window.getComputedStyle(o[r]).stopColor.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i),a=window.getComputedStyle(o[r]).stopOpacity,h=255;a&amp;&amp;(h=Math.floor(255*a)),e&amp;&amp;(0===i?(s[t][n]=[],s[t][n][0]=Math.floor(e[1]),s[t][n][1]=Math.floor(e[2]),s[t][n][2]=Math.floor(e[3]),s[t][n][3]=h):1===i?(s[t][n+1]=[],s[t][n+1][0]=Math.floor(e[1]),s[t][n+1][1]=Math.floor(e[2]),s[t][n+1][2]=Math.floor(e[3]),s[t][n+1][3]=h):2===i?(s[t+1][n+1]=[],s[t+1][n+1][0]=Math.floor(e[1]),s[t+1][n+1][1]=Math.floor(e[2]),s[t+1][n+1][2]=Math.floor(e[3]),s[t+1][n+1][3]=h):3===i&amp;&amp;(s[t+1][n]=[],s[t+1][n][0]=Math.floor(e[1]),s[t+1][n][1]=Math.floor(e[2]),s[t+1][n][2]=Math.floor(e[3]),s[t+1][n][3]=h))}}e[3*t+1][3*n+1]=new x,e[3*t+1][3*n+2]=new x,e[3*t+2][3*n+1]=new x,e[3*t+2][3*n+2]=new x,e[3*t+1][3*n+1].x=(-4*e[3*t][3*n].x+6*(e[3*t][3*n+1].x+e[3*t+1][3*n].x)+-2*(e[3*t][3*n+3].x+e[3*t+3][3*n].x)+3*(e[3*t+3][3*n+1].x+e[3*t+1][3*n+3].x)+-1*e[3*t+3][3*n+3].x)/9,e[3*t+1][3*n+2].x=(-4*e[3*t][3*n+3].x+6*(e[3*t][3*n+2].x+e[3*t+1][3*n+3].x)+-2*(e[3*t][3*n].x+e[3*t+3][3*n+3].x)+3*(e[3*t+3][3*n+2].x+e[3*t+1][3*n].x)+-1*e[3*t+3][3*n].x)/9,e[3*t+2][3*n+1].x=(-4*e[3*t+3][3*n].x+6*(e[3*t+3][3*n+1].x+e[3*t+2][3*n].x)+-2*(e[3*t+3][3*n+3].x+e[3*t][3*n].x)+3*(e[3*t][3*n+1].x+e[3*t+2][3*n+3].x)+-1*e[3*t][3*n+3].x)/9,e[3*t+2][3*n+2].x=(-4*e[3*t+3][3*n+3].x+6*(e[3*t+3][3*n+2].x+e[3*t+2][3*n+3].x)+-2*(e[3*t+3][3*n].x+e[3*t][3*n+3].x)+3*(e[3*t][3*n+2].x+e[3*t+2][3*n].x)+-1*e[3*t][3*n].x)/9,e[3*t+1][3*n+1].y=(-4*e[3*t][3*n].y+6*(e[3*t][3*n+1].y+e[3*t+1][3*n].y)+-2*(e[3*t][3*n+3].y+e[3*t+3][3*n].y)+3*(e[3*t+3][3*n+1].y+e[3*t+1][3*n+3].y)+-1*e[3*t+3][3*n+3].y)/9,e[3*t+1][3*n+2].y=(-4*e[3*t][3*n+3].y+6*(e[3*t][3*n+2].y+e[3*t+1][3*n+3].y)+-2*(e[3*t][3*n].y+e[3*t+3][3*n+3].y)+3*(e[3*t+3][3*n+2].y+e[3*t+1][3*n].y)+-1*e[3*t+3][3*n].y)/9,e[3*t+2][3*n+1].y=(-4*e[3*t+3][3*n].y+6*(e[3*t+3][3*n+1].y+e[3*t+2][3*n].y)+-2*(e[3*t+3][3*n+3].y+e[3*t][3*n].y)+3*(e[3*t][3*n+1].y+e[3*t+2][3*n+3].y)+-1*e[3*t][3*n+3].y)/9,e[3*t+2][3*n+2].y=(-4*e[3*t+3][3*n+3].y+6*(e[3*t+3][3*n+2].y+e[3*t+2][3*n+3].y)+-2*(e[3*t+3][3*n].y+e[3*t][3*n+3].y)+3*(e[3*t][3*n+2].y+e[3*t+2][3*n].y)+-1*e[3*t][3*n].y)/9}}this.nodes=e,this.colors=s}paintMesh(t,e){let s=(this.nodes.length-1)/3,r=(this.nodes[0].length-1)/3;if(&quot;bilinear&quot;===this.type||s&lt;2||r&lt;2){let n;for(let o=0;o&lt;s;++o)for(let s=0;s&lt;r;++s){let r=[];for(let t=3*o,e=3*o+4;t&lt;e;++t)r.push(this.nodes[t].slice(3*s,3*s+4));let i=[];i.push(this.colors[o].slice(s,s+2)),i.push(this.colors[o+1].slice(s,s+2)),(n=new m(r,i)).paint(t,e)}}else{let n,o,a,h,l,d,u;const x=s,g=r;s++,r++;let w=new Array(s);for(let t=0;t&lt;s;++t){w[t]=new Array(r);for(let e=0;e&lt;r;++e)w[t][e]=[],w[t][e][0]=this.nodes[3*t][3*e],w[t][e][1]=this.colors[t][e]}for(let t=0;t&lt;s;++t)for(let e=0;e&lt;r;++e)0!==t&amp;&amp;t!==x&amp;&amp;(n=i(w[t-1][e][0],w[t][e][0]),o=i(w[t+1][e][0],w[t][e][0]),w[t][e][2]=c(w[t-1][e][1],w[t][e][1],w[t+1][e][1],n,o)),0!==e&amp;&amp;e!==g&amp;&amp;(n=i(w[t][e-1][0],w[t][e][0]),o=i(w[t][e+1][0],w[t][e][0]),w[t][e][3]=c(w[t][e-1][1],w[t][e][1],w[t][e+1][1],n,o));for(let t=0;t&lt;r;++t){w[0][t][2]=[],w[x][t][2]=[];for(let e=0;e&lt;4;++e)n=i(w[1][t][0],w[0][t][0]),o=i(w[x][t][0],w[x-1][t][0]),w[0][t][2][e]=n&gt;0?2*(w[1][t][1][e]-w[0][t][1][e])/n-w[1][t][2][e]:0,w[x][t][2][e]=o&gt;0?2*(w[x][t][1][e]-w[x-1][t][1][e])/o-w[x-1][t][2][e]:0}for(let t=0;t&lt;s;++t){w[t][0][3]=[],w[t][g][3]=[];for(let e=0;e&lt;4;++e)n=i(w[t][1][0],w[t][0][0]),o=i(w[t][g][0],w[t][g-1][0]),w[t][0][3][e]=n&gt;0?2*(w[t][1][1][e]-w[t][0][1][e])/n-w[t][1][3][e]:0,w[t][g][3][e]=o&gt;0?2*(w[t][g][1][e]-w[t][g-1][1][e])/o-w[t][g-1][3][e]:0}for(let s=0;s&lt;x;++s)for(let r=0;r&lt;g;++r){let n=i(w[s][r][0],w[s+1][r][0]),o=i(w[s][r+1][0],w[s+1][r+1][0]),c=i(w[s][r][0],w[s][r+1][0]),x=i(w[s+1][r][0],w[s+1][r+1][0]),g=[[],[],[],[]];for(let t=0;t&lt;4;++t){(d=[])[0]=w[s][r][1][t],d[1]=w[s+1][r][1][t],d[2]=w[s][r+1][1][t],d[3]=w[s+1][r+1][1][t],d[4]=w[s][r][2][t]*n,d[5]=w[s+1][r][2][t]*n,d[6]=w[s][r+1][2][t]*o,d[7]=w[s+1][r+1][2][t]*o,d[8]=w[s][r][3][t]*c,d[9]=w[s+1][r][3][t]*x,d[10]=w[s][r+1][3][t]*c,d[11]=w[s+1][r+1][3][t]*x,d[12]=0,d[13]=0,d[14]=0,d[15]=0,u=f(d);for(let e=0;e&lt;9;++e){g[t][e]=[];for(let s=0;s&lt;9;++s)g[t][e][s]=p(u,e/8,s/8),g[t][e][s]&gt;255?g[t][e][s]=255:g[t][e][s]&lt;0&amp;&amp;(g[t][e][s]=0)}}h=[];for(let t=3*s,e=3*s+4;t&lt;e;++t)h.push(this.nodes[t].slice(3*r,3*r+4));l=y(h);for(let s=0;s&lt;8;++s)for(let r=0;r&lt;8;++r)(a=new m(l[s][r],[[[g[0][s][r],g[1][s][r],g[2][s][r],g[3][s][r]],[g[0][s][r+1],g[1][s][r+1],g[2][s][r+1],g[3][s][r+1]]],[[g[0][s+1][r],g[1][s+1][r],g[2][s+1][r],g[3][s+1][r]],[g[0][s+1][r+1],g[1][s+1][r+1],g[2][s+1][r+1],g[3][s+1][r+1]]]])).paint(t,e)}}}transform(t){if(t instanceof x)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].add(t);else if(t instanceof g)for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].transform(t)}scale(t){for(let e=0,s=this.nodes.length;e&lt;s;++e)for(let s=0,r=this.nodes[0].length;s&lt;r;++s)this.nodes[e][s]=this.nodes[e][s].scale(t)}}document.querySelectorAll(&quot;rect,circle,ellipse,path,text&quot;).forEach((r,n)=&gt;{let o=r.getAttribute(&quot;id&quot;);o||(o=&quot;patchjs_shape&quot;+n,r.setAttribute(&quot;id&quot;,o));const i=r.style.fill.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/),a=r.style.stroke.match(/^url\(\s*&quot;?\s*#([^\s&quot;]+)&quot;?\s*\)/);if(i&amp;&amp;i[1]){const a=document.getElementById(i[1]);if(a&amp;&amp;&quot;meshgradient&quot;===a.nodeName){const i=r.getBBox();let l=document.createElementNS(s,&quot;canvas&quot;);d(l,{width:i.width,height:i.height});const c=l.getContext(&quot;2d&quot;);let u=c.createImageData(i.width,i.height);const f=new b(a);&quot;objectBoundingBox&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.scale(new x(i.width,i.height));const p=a.getAttribute(&quot;gradientTransform&quot;);null!=p&amp;&amp;f.transform(h(p)),&quot;userSpaceOnUse&quot;===a.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;f.transform(new x(-i.x,-i.y)),f.paintMesh(u.data,l.width),c.putImageData(u,0,0);const y=document.createElementNS(t,&quot;image&quot;);d(y,{width:i.width,height:i.height,x:i.x,y:i.y});let g=l.toDataURL();y.setAttributeNS(e,&quot;xlink:href&quot;,g),r.parentNode.insertBefore(y,r),r.style.fill=&quot;none&quot;;const w=document.createElementNS(t,&quot;use&quot;);w.setAttributeNS(e,&quot;xlink:href&quot;,&quot;#&quot;+o);const m=&quot;patchjs_clip&quot;+n,M=document.createElementNS(t,&quot;clipPath&quot;);M.setAttribute(&quot;id&quot;,m),M.appendChild(w),r.parentElement.insertBefore(M,r),y.setAttribute(&quot;clip-path&quot;,&quot;url(#&quot;+m+&quot;)&quot;),u=null,l=null,g=null}}if(a&amp;&amp;a[1]){const o=document.getElementById(a[1]);if(o&amp;&amp;&quot;meshgradient&quot;===o.nodeName){const i=parseFloat(r.style.strokeWidth.slice(0,-2))*(parseFloat(r.style.strokeMiterlimit)||parseFloat(r.getAttribute(&quot;stroke-miterlimit&quot;))||1),a=r.getBBox(),l=Math.trunc(a.width+i),c=Math.trunc(a.height+i),u=Math.trunc(a.x-i/2),f=Math.trunc(a.y-i/2);let p=document.createElementNS(s,&quot;canvas&quot;);d(p,{width:l,height:c});const y=p.getContext(&quot;2d&quot;);let g=y.createImageData(l,c);const w=new b(o);&quot;objectBoundingBox&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.scale(new x(l,c));const m=o.getAttribute(&quot;gradientTransform&quot;);null!=m&amp;&amp;w.transform(h(m)),&quot;userSpaceOnUse&quot;===o.getAttribute(&quot;gradientUnits&quot;)&amp;&amp;w.transform(new x(-u,-f)),w.paintMesh(g.data,p.width),y.putImageData(g,0,0);const M=document.createElementNS(t,&quot;image&quot;);d(M,{width:l,height:c,x:0,y:0});let S=p.toDataURL();M.setAttributeNS(e,&quot;xlink:href&quot;,S);const k=&quot;pattern_clip&quot;+n,A=document.createElementNS(t,&quot;pattern&quot;);d(A,{id:k,patternUnits:&quot;userSpaceOnUse&quot;,width:l,height:c,x:u,y:f}),A.appendChild(M),o.parentNode.appendChild(A),r.style.stroke=&quot;url(#&quot;+k+&quot;)&quot;,g=null,p=null,S=null}}})}();</script></defs><g id="layer1" transform="translate(-337.62 -484.898)"><path id="rect4331" d="M388.95 484.898c-28.438 0-51.33 22.893-51.33 51.33v367.543c0 28.438 22.892 51.33 51.33 51.33h1782.1c28.438 0 51.33-22.892 51.33-51.33V536.23c0-28.438-22.892-51.33-51.33-51.33H388.95z" style="fill:#191237;fill-opacity:1;stroke:none;stroke-width:5.00001;stroke-linecap:round;stroke-linejoin:round;stroke-dasharray:none;stroke-opacity:1"/><path id="path26051" d="M388.95 484.898c-16.432 0-30.843 7.787-40.225 19.727l72.074 41.613 4.88-8.453c9.184-15.906 12.478-30.577 9.884-44.015-.577-3.112-1.538-6.046-2.731-8.872h-43.883zm317.439 0c.862.538 1.54 1.16 2.441 1.68 6.387 3.688 13.052 6.535 19.994 8.54a138.185 138.185 0 0 0 21.49 4.642l8.582-14.862H706.39zm110.744 0-26.23 45.434 17.376 10.031 30.207-52.32c.74-1.28 1.627-1.958 2.389-3.145h-23.742zm93.531 0c.92 1.688 2.236 3.09 2.938 4.934l2.85-4.934h-5.788zm25.62 0L902.962 595.03l16.533 9.545 50.018-48.021-16.485 67.383 16.532 9.544 85.35-90.996-17.097-9.869-67.396 74.432 16.129-63.078-14.746-8.514-46.375 45.615 30.761-95.584-1.017-.588h-18.887zm259.005 0 5.979 3.452 3.593-3.452h-9.572zm45.092 0-5.58 22.813 16.531 9.545 30.35-32.358h-24.127l-5.366 5.926 1.516-5.926h-13.324zm79.73 0c-.337.566-.704 1.003-1.039 1.582-10.268 17.785-14.296 33.66-12.09 47.625 2.306 13.94 10.784 25.138 25.438 33.598 14.528 8.388 28.355 10.108 41.48 5.162 13.162-5.009 24.895-16.436 35.2-34.283 10.376-17.972 14.41-33.928 12.105-47.867-.322-2.04-1.057-3.895-1.642-5.817h-99.452zm352.75 0-5.365 9.293 17.283 9.979 11.127-19.272h-23.045zm84.04 0-26.376 45.684 17.377 10.033 32.168-55.717h-23.17zm74.267 0-44.941 77.842 17.847 10.305 24.35-42.176 19.863-4.687 7.543 76.744 21.135 12.203-10.053-93.223 64.31-15.722-21.04-12.149-70.586 17.485 15.369-26.622h-23.797zm-360.35 18.805-60.74 105.203 17.283 9.979 34.328-59.46c6.11-10.582 13.021-17.488 20.73-20.718 7.81-3.257 15.815-2.517 24.018 2.219 6.889 3.977 10.678 9.129 11.368 15.455.752 6.362-1.604 14.27-7.063 23.726l-37.637 65.19 17.38 10.033 37.636-65.19c16.378-28.367 13.827-48.75-7.652-61.152-14.278-8.243-28.104-8.085-41.479.475l7.42-16.758-15.592-9.002zm-977.625 8.686-60.738 105.205 17.377 10.033 30.207-52.32c7.34-12.712 15.81-20.807 25.414-24.28 9.64-3.535 19.782-2.23 30.428 3.916 9.268 5.351 15.692 12.735 19.273 22.15l10.196-17.66c-3.857-8.07-10.105-14.6-18.746-19.59-8.266-4.772-16.533-6.871-24.795-6.298-8.165.547-15.868 3.696-23.114 9.45l10.186-21.55-15.688-9.056zm-154.736 15.484c-.447 2.734-.838 5.492-.838 8.356v28.279c3.749 3.34 7.874 6.509 12.764 9.332 6.387 3.688 13.052 6.535 19.994 8.539a138.185 138.185 0 0 0 21.49 4.642l9.924-17.189a146.442 146.442 0 0 1-22.092-2.734c-7.267-1.44-14.157-4.043-20.67-7.803-11.272-6.508-17.907-14.68-19.908-24.52-.461-2.268-.645-4.574-.664-6.902zm1620.809.889-9.979 17.283c7.13-.058 14.27.808 21.42 2.598a78.582 78.582 0 0 1 20.305 8.216c8.203 4.737 13.547 10.16 16.031 16.27 2.547 6.146 1.237 13.695-3.934 22.65l-1.574 2.725-23.201-13.397c-8.015-4.627-16.157-7.95-24.426-9.968-8.27-2.02-16.08-1.728-23.428.877-7.312 2.541-13.587 8.353-18.83 17.433-6.327 10.959-7.903 21.279-4.726 30.961 3.275 9.656 9.986 17.413 20.13 23.27 7.265 4.194 15.039 6.636 23.323 7.328 8.347.728 16.193-1.004 23.539-5.196a125.065 125.065 0 0 0-3.215 9.04c-.964 3.116-1.62 6.204-1.965 9.261l17.377 10.033c.802-6.884 2.919-14.096 6.352-21.632 3.495-7.5 6.943-14.194 10.342-20.08l12.42-21.51c5.387-9.33 8.916-16.602 10.59-21.815 2.355-7.406 2.493-14.298.413-20.675-2.043-6.44-5.55-12.223-10.523-17.348-4.874-5.152-10.441-9.537-16.703-13.152a91.08 91.08 0 0 0-19.229-8.346 169.753 169.753 0 0 0-20.51-4.826zm-346.073 2.535-84.384 146.158 17.845 10.305 24.352-42.176 19.863-4.688 7.543 76.745 21.135 12.203-10.053-93.223 64.31-15.723-21.04-12.148-70.586 17.484 48.861-84.632-17.846-10.305zM580.645 562.879l-36.13 119.412 16.532 9.545 50.02-48.02-16.485 67.381 16.531 9.545 85.35-90.996-17.096-9.869-67.396 74.434 16.129-63.079-14.748-8.515-46.375 45.615 30.763-95.582-17.095-9.871zm507.189 2.668c-5.151 0-10.213.946-15.186 2.834-13.26 5.035-25.043 16.477-35.347 34.324-10.268 17.784-14.299 33.658-12.092 47.623 2.306 13.94 10.786 25.14 25.44 33.6 14.528 8.388 28.354 10.108 41.48 5.162 13.162-5.009 24.895-16.436 35.2-34.283 10.375-17.973 14.41-33.929 12.105-47.868-2.207-13.965-10.574-25.141-25.102-33.529-9.08-5.242-17.913-7.864-26.498-7.863zm101.21 54.38-60.737 105.204 17.283 9.978 34.328-59.459c6.11-10.583 13.02-17.488 20.73-20.718 7.809-3.257 15.815-2.518 24.018 2.218 6.888 3.977 10.678 9.13 11.367 15.455.752 6.363-1.603 14.271-7.062 23.727l-37.637 65.19 17.377 10.03 37.639-65.187c16.378-28.367 13.826-48.751-7.653-61.152-14.277-8.243-28.103-8.085-41.478.475l7.42-16.758-15.594-9.002zm512.804 23.55-9.979 17.283c7.13-.058 14.27.808 21.42 2.597a78.582 78.582 0 0 1 20.305 8.217c8.203 4.736 13.547 10.16 16.031 16.27 2.547 6.146 1.236 13.695-3.934 22.65l-1.574 2.725-23.201-13.397c-8.015-4.628-16.158-7.95-24.428-9.968-8.269-2.02-16.077-1.728-23.426.876-7.312 2.542-13.59 8.354-18.832 17.434-6.327 10.959-7.9 21.278-4.724 30.961 3.275 9.656 9.986 17.413 20.13 23.27 7.265 4.193 15.039 6.636 23.323 7.328 8.347.727 16.193-1.004 23.539-5.196a125.107 125.107 0 0 0-3.215 9.04c-.964 3.116-1.62 6.204-1.965 9.261l17.377 10.033c.802-6.884 2.919-14.096 6.352-21.632 3.495-7.5 6.943-14.194 10.342-20.08l12.418-21.51c5.387-9.33 8.918-16.602 10.591-21.815 2.356-7.406 2.494-14.298.415-20.676-2.044-6.44-5.551-12.222-10.524-17.347-4.874-5.152-10.443-9.537-16.705-13.153a91.063 91.063 0 0 0-19.227-8.345 169.76 169.76 0 0 0-20.51-4.826zm-370.428 4.044-84.383 146.159 17.846 10.304 24.35-42.175 19.865-4.688 7.543 76.744 21.134 12.203-10.052-93.222 64.31-15.723-21.04-12.148-70.589 17.484 48.864-84.633-17.848-10.305zm-602.035 5.288c-5.151 0-10.213.945-15.186 2.834-13.26 5.035-25.041 16.477-35.345 34.324-10.268 17.784-14.3 33.66-12.092 47.625 2.305 13.939 10.786 25.137 25.44 33.597 14.527 8.388 28.354 10.109 41.48 5.163 13.161-5.01 24.893-16.437 35.197-34.284 10.376-17.972 14.413-33.928 12.107-47.867-2.207-13.965-10.575-25.141-25.103-33.53-9.08-5.242-17.913-7.863-26.498-7.862zm1478.71 14.728c-6.388-.432-12.84.727-19.355 3.479-12.966 5.538-24.295 16.7-33.984 33.482a113.41 113.41 0 0 0-9.486 21.201c-2.419 7.37-3.666 14.665-3.743 21.885-.014 7.256 1.638 14.012 4.955 20.27 3.318 6.257 8.796 11.59 16.436 16.001 12.837 7.412 25.43 7.584 37.775.518l-5.957 14.22 15.594 9.005 12.05-20.873v-40.172c-2.292 3.82-4.79 7.66-7.767 11.54-3.337 4.336-7.108 8.045-11.31 11.13-4.104 3.058-8.588 4.894-13.451 5.51-4.802.65-9.925-.595-15.373-3.74-5.511-3.182-9.216-7.034-11.116-11.554-1.8-4.546-2.403-9.36-1.806-14.443.695-5.11 2.086-10.192 4.172-15.25 2.121-5.12 4.41-9.81 6.869-14.068 2.458-4.259 5.357-8.556 8.695-12.89 3.338-4.336 7.027-8.051 11.068-11.145 4.14-3.121 8.61-5.007 13.41-5.659a18.949 18.949 0 0 1 1.84-.14c4.327-.123 8.901 1.206 13.723 3.99.418.241.65.551 1.047.8v-19.126c-4.73-2.123-9.484-3.646-14.285-3.97zm-146.07 18.268a17.897 17.897 0 0 0-4.296.625c-4.643 1.244-8.32 4.213-11.032 8.91-2.711 4.696-3.445 9.365-2.2 14.008 1.243 4.642 3.995 8.194 8.253 10.652 4.258 2.458 8.71 3.066 13.352 1.822 4.642-1.244 8.32-4.215 11.03-8.912 2.712-4.696 3.446-9.365 2.202-14.008-1.244-4.642-3.996-8.192-8.254-10.65-2.927-1.69-5.945-2.507-9.055-2.447zM830.598 707.189l-60.74 105.204 17.285 9.98 34.328-59.459c6.11-10.583 13.019-17.49 20.728-20.72 7.809-3.257 15.816-2.518 24.02 2.218 6.888 3.977 10.676 9.13 11.365 15.455.752 6.362-1.601 14.271-7.06 23.727l-37.637 65.19 17.377 10.032 37.636-65.189c16.378-28.367 13.829-48.751-7.65-61.152-14.278-8.244-28.106-8.085-41.48.474l7.42-16.758-15.592-9.002zm142.375 27.594-84.385 146.158 17.848 10.305 24.35-42.176 19.864-4.687 7.541 76.746 21.135 12.201-10.05-93.223 64.308-15.722-21.04-12.149-70.587 17.485 48.863-84.633-17.847-10.305zm-590.274 17.953-45.08 49.787v26.37l62.174-66.286-17.094-9.87zm1037.377 6.965-9.978 17.283c7.13-.058 14.27.808 21.42 2.598a78.577 78.577 0 0 1 20.304 8.217c8.204 4.736 13.547 10.157 16.032 16.267 2.546 6.146 1.234 13.698-3.936 22.653l-1.572 2.724-23.201-13.396c-8.016-4.628-16.159-7.95-24.428-9.969-8.27-2.019-16.078-1.727-23.426.877-7.312 2.542-13.59 8.352-18.832 17.432-6.327 10.958-7.901 21.28-4.725 30.963 3.276 9.656 9.986 17.412 20.131 23.27 7.264 4.193 15.038 6.636 23.322 7.327 8.347.728 16.193-1.003 23.54-5.195a125.059 125.059 0 0 0-3.215 9.039c-.965 3.117-1.62 6.205-1.965 9.262l17.377 10.033c.802-6.885 2.918-14.096 6.351-21.633 3.496-7.5 6.944-14.194 10.342-20.08l12.418-21.51c5.387-9.33 8.918-16.602 10.592-21.814 2.356-7.407 2.493-14.299.414-20.676-2.043-6.44-5.55-12.222-10.523-17.348-4.875-5.151-10.443-9.537-16.706-13.152a91.075 91.075 0 0 0-19.228-8.346 169.723 169.723 0 0 0-20.508-4.826zm599.936 6.475-31.4 54.386c.264-7.11-1.304-13.36-4.706-18.748-3.366-5.45-8.117-9.947-14.254-13.49-12.524-7.23-25.302-8.096-38.332-2.594-12.966 5.54-24.295 16.7-33.984 33.483a113.406 113.406 0 0 0-9.484 21.201c-2.419 7.37-3.666 14.665-3.743 21.885-.014 7.256 1.636 14.012 4.954 20.27 3.317 6.256 8.797 11.59 16.437 16.001 12.837 7.412 25.428 7.584 37.773.518l-5.955 14.22 15.592 9.005 84.385-146.159-17.283-9.978zM432.717 785.67c-5.151 0-10.213.946-15.186 2.834-13.26 5.035-25.043 16.475-35.347 34.322-10.268 17.785-14.297 33.66-12.09 47.625 2.305 13.94 10.784 25.14 25.437 33.6 14.528 8.388 28.355 10.108 41.48 5.162 13.162-5.009 24.896-16.436 35.2-34.283 10.376-17.973 14.411-33.929 12.105-47.867-2.207-13.966-10.573-25.144-25.101-33.532-9.08-5.242-17.913-7.862-26.498-7.861zm1371.89 14.85a17.885 17.885 0 0 0-4.296.625c-4.643 1.243-8.32 4.213-11.032 8.91-2.711 4.696-3.445 9.365-2.2 14.008 1.243 4.642 3.995 8.193 8.253 10.652 4.258 2.458 8.71 3.066 13.352 1.822 4.642-1.244 8.317-4.215 11.029-8.912 2.712-4.697 3.447-9.365 2.203-14.008-1.244-4.642-3.996-8.192-8.254-10.65-2.928-1.69-5.945-2.507-9.055-2.447zm145.586.039c4.327-.123 8.901 1.206 13.723 3.99 5.448 3.145 9.09 6.962 10.926 11.445 1.899 4.52 2.533 9.35 1.9 14.496-.534 5.12-1.844 10.208-3.93 15.266-2.085 5.058-4.355 9.716-6.814 13.974-2.495 4.321-5.43 8.68-8.805 13.079-3.337 4.335-7.106 8.044-11.308 11.129-4.104 3.058-8.588 4.894-13.451 5.51-4.802.65-9.927-.596-15.375-3.741-5.511-3.182-9.215-7.033-11.114-11.553-1.8-4.546-2.403-9.36-1.806-14.443.695-5.11 2.086-10.192 4.172-15.25 2.121-5.12 4.41-9.81 6.869-14.068 2.458-4.259 5.357-8.556 8.695-12.891 3.338-4.335 7.028-8.05 11.068-11.145 4.14-3.12 8.61-5.006 13.41-5.658a18.897 18.897 0 0 1 1.84-.14zM533.93 840.05l-60.74 105.203 17.056 9.848h.303l34.252-59.329c6.11-10.583 13.02-17.49 20.73-20.72 7.809-3.257 15.815-2.516 24.018 2.22 6.888 3.977 10.678 9.127 11.367 15.454.752 6.362-1.601 14.272-7.06 23.728l-22.315 38.647h23.172l16.52-28.614c16.377-28.367 13.826-48.753-7.653-61.154-14.278-8.243-28.104-8.085-41.478.475l7.42-16.756-15.592-9.002zm527.699 6.912-9.979 17.283c7.13-.058 14.271.808 21.42 2.598a78.587 78.587 0 0 1 20.305 8.217c8.203 4.736 13.547 10.16 16.031 16.27 2.547 6.145 1.235 13.695-3.935 22.65l-1.573 2.724-23.2-13.394c-8.016-4.628-16.16-7.952-24.428-9.971-8.27-2.019-16.078-1.727-23.426.877-7.312 2.541-13.59 8.353-18.832 17.433-6.327 10.96-7.902 21.279-4.725 30.961 1.562 4.606 3.96 8.75 7.084 12.49h88.557c.079-.137.161-.33.24-.466l12.42-21.51c5.387-9.33 8.916-16.602 10.59-21.814 2.356-7.407 2.495-14.3.416-20.676-2.043-6.44-5.553-12.222-10.526-17.348-4.874-5.152-10.44-9.537-16.703-13.152a91.085 91.085 0 0 0-19.228-8.346 169.725 169.725 0 0 0-20.508-4.826zm1004.348 4.644c-1.278-.01-2.551.043-3.82.145-10.058.79-19.375 4.343-27.95 10.664-8.513 6.357-15.788 14.765-21.826 25.223-9.726 16.845-12.806 32.809-9.24 47.892 1.748 7.187 5.026 13.68 9.634 19.57h25.162c-8.918-6.074-14.475-13.357-16.234-22.003-2.001-9.84.163-20.237 6.49-31.196l.325-.564 74.865 43.223 4.88-8.454c9.184-15.905 12.476-30.577 9.881-44.015-2.496-13.465-10.757-24.247-24.785-32.346-9.314-5.378-18.442-8.09-27.382-8.139zM676.305 867.645l-50.494 87.457h23.796l44.543-77.153-17.845-10.304zm1061.935 14.753-31.4 54.387c.265-7.11-1.303-13.36-4.705-18.748-3.366-5.45-8.12-9.945-14.256-13.488-12.524-7.231-25.3-8.097-38.33-2.594-12.967 5.539-24.295 16.7-33.985 33.482-3.588 6.215-6.425 12.82-8.796 19.665h22.498c1.36-2.882 2.66-5.917 4.142-8.485 2.459-4.258 5.358-8.555 8.696-12.89 3.337-4.336 7.025-8.05 11.066-11.145 4.14-3.12 8.61-5.007 13.412-5.658a18.929 18.929 0 0 1 1.84-.14c4.326-.124 8.9 1.206 13.723 3.99 5.447 3.145 9.089 6.961 10.925 11.445 1.9 4.52 2.534 9.35 1.9 14.496-.293 2.812-1.396 5.593-2.158 8.387h26.499l36.212-62.723-17.283-9.98zm418.563 17.36-10.194 55.344h19.45l8.685-44.987-17.941-10.357zm-633.967 16.986a17.888 17.888 0 0 0-4.297.625c-4.642 1.244-8.32 4.214-11.031 8.91-2.712 4.697-3.445 9.366-2.201 14.008 1.244 4.643 3.995 8.194 8.254 10.652 4.258 2.459 8.707 3.067 13.35 1.823 4.642-1.244 8.319-4.216 11.03-8.912 2.712-4.697 3.446-9.366 2.202-14.008-1.244-4.643-3.994-8.194-8.252-10.653-2.928-1.69-5.946-2.505-9.055-2.445zm-806.961 28.354-40.387 10.004h57.717l-17.33-10.004z" style="font-size:162.085px;font-family:Hack;-inkscape-font-specification:&quot;Hack, Normal&quot;;text-align:center;text-anchor:middle;fill:#1a133b;fill-opacity:1;stroke-width:5;stroke-linecap:round;stroke-linejoin:round"/><g id="g26019" style="stroke-width:1.35704" transform="matrix(.7369 0 0 .7369 427.491 79.183)"><g id="text25728" aria-label="czerwonka.dev" style="font-size:162.085px;font-family:Hack;-inkscape-font-specification:&quot;Hack, Normal&quot;;text-align:center;text-anchor:middle;opacity:1;fill:#f34444;stroke-width:6.78521;stroke-linecap:round;stroke-linejoin:round"><path id="path25934" d="M575.862 932.336q-14.009 0-23.585-5.856-9.497-5.936-14.404-16.462-4.828-10.526-4.828-24.218 0-13.77 4.907-24.217 4.907-10.527 14.483-16.383 9.576-5.936 23.743-5.936 7.36 0 13.296 1.741 5.936 1.662 12.109 5.065v15.275q-5.62-4.986-11.317-7.36-5.62-2.375-12.822-2.375-10.684 0-17.095 4.59-6.331 4.591-9.18 12.347-2.77 7.756-2.77 17.253 0 9.418 2.849 17.253 2.85 7.756 9.18 12.347 6.332 4.59 16.937 4.59 6.965 0 12.98-2.295 6.015-2.295 11.238-7.281v15.116q-11.317 6.806-25.721 6.806z" style="stroke-width:6.78521"/><path id="path25936" d="m633.715 916.587 50.89-63.71h-48.99v-11.634h64.343v13.296l-50.89 63.63h50.89v11.872h-66.243Z" style="stroke-width:6.78521"/><path id="path25938" d="M768.891 932.336c-13.665 0-24.402-4.089-32.21-12.267-7.757-8.23-11.635-19.443-11.635-33.636 0-8.81 1.53-16.778 4.59-23.9 3.113-7.124 7.704-12.77 13.771-16.937 6.12-4.221 13.666-6.332 22.635-6.332 11.819 0 20.973 3.799 27.463 11.397 6.542 7.545 9.814 18.018 9.814 31.42v7.122h-63.077v.475c0 9.234 2.427 16.594 7.28 22.081 4.855 5.487 12.03 8.231 21.528 8.231 5.487 0 10.79-.87 15.908-2.612a106.855 106.855 0 0 0 14.958-6.331v14.483a100.84 100.84 0 0 1-15.275 4.907 65.329 65.329 0 0 1-15.75 1.9z" style="stroke-width:6.78521"/><path id="path25940" d="M836.717 841.401h13.217l1.425 17.332q3.72-9.418 11.159-14.404 7.518-5.065 17.965-5.065 10.922 0 18.995 5.54v14.88q-8.548-6.966-20.261-6.966-13.454 0-20.656 8.627-7.202 8.548-7.202 24.614v44.082h-14.642z" style="stroke-width:6.78521"/><path id="path25942" d="M910.4 841.401h14.403l15.433 71.625L952.9 867.28h12.426l12.82 45.745L993.58 841.4h14.404l-20.736 88.64h-13.929l-14.167-48.594-14.087 48.594h-13.93z" style="stroke-width:6.78521"/><path id="path25944" d="M1056.893 932.336c-12.346 0-21.79-3.983-28.333-11.95-6.49-8.02-9.735-19.522-9.735-34.507 0-15.037 3.271-26.565 9.814-34.585s15.934-12.03 28.175-12.03c12.24 0 21.606 4.01 28.096 12.03 6.542 7.967 9.813 19.522 9.813 34.665 0 15.037-3.244 26.539-9.734 34.506-6.49 7.914-15.855 11.871-28.096 11.871z" style="stroke-width:6.78521"/><path id="path25946" d="M1120.999 841.401h13.138l1.424 13.296q7.994-15.433 26.038-15.433 27.146 0 27.146 35.852v54.925h-14.641v-54.925q0-11.95-4.195-17.57-4.115-5.619-12.82-5.619-10.369 0-15.988 7.36-5.54 7.282-5.54 20.657v50.097H1121z" style="stroke-width:6.78521"/><path id="path25948" d="M1221.036 806.895h15.037v71.308l38.226-36.802h17.728l-34.902 33.398 40.363 55.242h-17.807l-32.765-45.744-10.843 10.209v35.535h-15.037z" style="stroke-width:6.78521"/><path id="path25950" d="M1341.017 932.336c-8.548 0-15.618-2.453-21.21-7.36-5.54-4.96-8.31-12.056-8.31-21.29 0-7.65 1.846-13.612 5.54-17.886 3.693-4.326 8.52-7.36 14.482-9.101 5.963-1.741 12.32-2.612 19.074-2.612h19.548v-2.295c0-7.545-1.925-12.795-5.777-15.75-3.799-2.954-9.154-4.432-16.066-4.432a57.34 57.34 0 0 0-15.829 2.216c-5.17 1.478-9.998 3.536-14.483 6.174v-14.563a123.846 123.846 0 0 1 14.72-4.432 66.457 66.457 0 0 1 15.196-1.74c5.276 0 10.394.738 15.354 2.215 5.012 1.425 9.339 3.799 12.98 7.123 3.64 3.271 6.067 7.677 7.28 13.217.845 3.904 1.267 9.787 1.267 17.649v18.124c0 4.96.264 10.446.791 16.461.58 6.015 1.873 11.344 3.878 15.987h-14.641a36.832 36.832 0 0 1-2.137-6.569 91.27 91.27 0 0 1-1.266-6.885c-3.113 5.329-7.44 9.286-12.98 11.871-5.487 2.586-11.29 3.878-17.411 3.878z" style="stroke-width:6.78521"/><path id="path25952" d="M1446.831 932.178q-5.382 0-9.101-3.72-3.72-3.72-3.72-9.655 0-5.936 3.72-9.656 3.72-3.72 9.101-3.72 5.382 0 9.101 3.72 3.72 3.72 3.72 9.656t-3.72 9.655q-3.72 3.72-9.101 3.72z" style="stroke-width:6.78521"/><path id="path25954" d="M1539.745 932.336q-9.655 0-16.224-4.115-6.57-4.115-10.526-11-3.878-6.886-5.62-15.196-1.74-8.39-1.74-16.858 0-21.21 9.259-33.557 9.339-12.346 25.167-12.346 7.757 0 13.93 3.324 6.173 3.245 9.813 10.13v-45.823h14.563V930.04h-13.138l-1.425-11.159q-7.835 13.454-24.059 13.454zm2.612-12.346q6.885 0 11.08-3.245 4.273-3.245 6.49-8.389 2.295-5.223 3.086-11.16.791-6.014.791-11.475 0-5.382-.791-11.317-.791-5.936-3.087-11.08-2.216-5.224-6.49-8.469-4.194-3.245-11.08-3.245-6.964 0-11.238 3.245-4.194 3.245-6.41 8.469-2.137 5.144-2.929 11.08-.79 5.935-.79 11.317 0 5.382.79 11.397.792 5.935 2.929 11.159 2.216 5.144 6.41 8.468 4.274 3.245 11.239 3.245z" style="stroke-width:6.78521"/><path id="path25956" d="M1647.142 932.336c-13.665 0-24.402-4.089-32.211-12.267-7.756-8.23-11.634-19.443-11.634-33.636 0-8.81 1.53-16.778 4.59-23.9 3.113-7.124 7.703-12.77 13.771-16.937 6.12-4.221 13.666-6.332 22.635-6.332 11.819 0 20.973 3.799 27.463 11.397 6.542 7.545 9.813 18.018 9.813 31.42v7.122h-63.077v.475c0 9.234 2.427 16.594 7.282 22.081 4.854 5.487 12.03 8.231 21.526 8.231 5.488 0 10.79-.87 15.908-2.612a106.85 106.85 0 0 0 14.958-6.331v14.483a100.84 100.84 0 0 1-15.274 4.907 65.33 65.33 0 0 1-15.75 1.9z" style="stroke-width:6.78521"/><path id="path25958" d="M1698.98 841.401h15.117l25.722 74.395 25.8-74.395h15.117l-31.5 88.64h-18.756z" style="stroke-width:6.78521"/></g></g></g></svg>